// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// For now, we'll keep the schema minimal since we only need a health endpoint
// You can add models here as the project grows

// User model for authentication
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String?   // null for OAuth-only users
  name          String?
  avatar        String?
  provider      String    @default("local") // "local" or "google"
  googleId      String?   @unique
  isVerified    Boolean   @default(false)
  resetToken    String?
  resetExpires  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organizationMembers  OrganizationMember[]

  @@map("users")
}

// Organization model
model Organization {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  members     OrganizationMember[]
  monitors    Monitor[]

  @@map("organizations")
}

// Organization member model (many-to-many relationship)
model OrganizationMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String       @db.ObjectId
  userId         String       @db.ObjectId
  role           String       @default("member") // "admin" or "member"
  joinedAt       DateTime     @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

// Monitor model for uptime checks
model Monitor {
  id                    String                    @id @default(auto()) @map("_id") @db.ObjectId
  organizationId        String                    @db.ObjectId
  type                  String                    // "https", "tcp"
  name                  String
  failThreshold         Int                       @default(3)
  checkInterval         Int                       @default(300) // seconds
  checkTimeout          Int                       @default(30)  // seconds
  url                   String
  httpMethod            String                    @default("HEAD")
  requestHeaders        Json                      // Array of objects with key/value pairs
  followRedirects       Boolean                   @default(true)
  expectedStatusCodes   String[]                  // Array of strings like "200-299", "300", "301", "400-499"
  expectedResponseHeaders Json                    // Array of objects with key/value pairs
  contacts              String[]                  // Array of user IDs
  isActive              Boolean                   @default(true)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  organization          Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("monitors")
}
